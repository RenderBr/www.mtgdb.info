@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<MtgDb.Info.PlaneswalkerModel>
@using System.Collections.Generic;
@using System.Linq;
@using  MtgDb.Info;
@{
  Layout = "_Layout.cshtml";
}
@section Top
{
    <div style="color:white;margin-left:50px;">
    <h4>Your Library</h4>
    Unique cards owned <b><span id="unique">@Model.TotalCards</span></b> of 22000. Total number of cards (including duplicates) owned: <b><span id="total">@Model.TotalAmount</span></b>
    </div>
}
<input type="hidden" id="active_set" value="@Model.SetId" />
<input type="hidden" id="active_block" value="@Model.Block.Replace(" ",string.Empty)" />

<div class="tab-container" id="outer-container">
    <ul class='etabs'>
        @foreach(KeyValuePair<string, int> k in Model.Blocks)
        {
            string c = k.Key == Model.Block ? "active" : "";
            string blockId = k.Key.Replace(" ",string.Empty);

            <li class='tab @c'>
                <a href="~/@Model.Planeswalker.UserName/blocks/@k.Key/cards/">
                    @k.Key
                    <span id="@blockId" class="badge">@k.Value</span>
                </a>
            </li>
        }
    </ul>
     <div class="panel-container">
        <div id="nested-tab-1">
            <div class="tab-container" id="outer-container">
    <ul class='etabs'>
    @foreach(CardSet set in Model.Sets)
    {
        string c = set.Id == Model.SetId ? "active" : "";
        string show = Model.Show && set.Id == Model.SetId ? "" : 
        !Model.Show && set.Id == Model.SetId ? "?show=true" : "";

        string imgUrl = string.Format("http://api.mtgdb.info/content/set_images/symbols/{0}_sym.gif",set.Id.ToLower());
        <li class='tab @c'>
            <a href="~/@Model.Planeswalker.UserName/blocks/@set.Block/cards/@set.Id/@show">
                <img src="@imgUrl" /> @set.Name
                <span id="@set.Id" class="badge">@Model.Counts[set.Id]</span>
            </a>
        </li>
    }
    </ul>
    <div class="panel-container">
        <div id="nested-tab-1">
        @foreach(var cardInfo in Model.Cards)
        {
            string id = string.Format("card_{0}", cardInfo.Card.Id);
            string valueId = string.Format("value_{0}", cardInfo.Card.Id);
            string blockId = Model.Block.Replace(" ", string.Empty);
            string description = @cardInfo.Card.Description.Replace("\"","'");

            <input type="hidden" id="@cardInfo.Card.Id" value="@cardInfo.Amount" />
            <div class="tool" id="@id" title="<b>@cardInfo.Card.Name</b> #@cardInfo.Card.SetNumber <br />You have: <span id='@valueId' class='badge'><script>$('#@valueId').html($('#@cardInfo.Card.Id').val());</script></span>" data-container="#@id" 
            data-content=
             "@description <br /><span class='label label-primary'>@cardInfo.Card.Power &#47; @cardInfo.Card.Toughness</span><br /><br /><button type='button' class='btn btn-danger btn-xs' onclick='minusCard(@cardInfo.Card.Id);'>-</button><button type='button' class='btn btn-success btn-xs' onclick='addCard(@cardInfo.Card.Id);'>+</button>" 
             style="float:left;">
                
                <a  rel="popover" href="~/cards/@cardInfo.Card.Id" class="thumbnail">
                @if(cardInfo.Amount > 0)
                {
                    <img src="@cardInfo.Card.CardImage" style="width:111px;height:155px;" />
                }
                else
                {
                    <img src="@cardInfo.Card.CardImage" class="dontown" style="width:111px;height:155px;" />
                }
                </a>
           
            </div><!--/span-->
        }
        </div>
    <br style="clear:both;" />
    </div>
</div> 
        </div>
     </div>
</div>
<script>
$('.tool').popover({
    html: true,
    trigger: 'hover',
    placement: 'top',
    animation: false
    })
    .on('show.bs.popover', function (e) {
        var $this = $(this);

        // Currently hovering popover
        $this.data("hoveringPopover", true);

        // If it's still waiting to determine if it can be hovered, don't allow other handlers
        if ($this.data("waitingForPopoverTO")) {
            //alert('hide');
            e.stopImmediatePropagation();
        }
    })
    .on('hide.bs.popover', function (e) {
       var $this = $(this);
      
        // If timeout was reached, allow hide to occur
        if ($this.data("forceHidePopover")) {
            $this.data("forceHidePopover", false);
            return true;
        }

        // Prevent other `hide` handlers from executing
        e.stopImmediatePropagation();

        // Reset timeout checker
        clearTimeout($this.data("popoverTO"));

        // No longer hovering popover
        $this.data("hoveringPopover", false);

        // Flag for `show` event
        $this.data("waitingForPopoverTO", true);

        // In 1500ms, check to see if the popover is still not being hovered
        $this.data("popoverTO", setTimeout(function () {
            // If not being hovered, force the hide
            if (!$this.data("hoveringPopover")) {
                $this.data("forceHidePopover", true);
                $this.data("waitingForPopoverTO", false);
                $this.popover("hide");
            }
        }, 100));

        // Stop default behavior
        return false;
    });
   
</script>
<br style="clear:both;" />
