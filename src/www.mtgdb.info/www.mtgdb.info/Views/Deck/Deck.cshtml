@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<MtgDb.Info.DeckModel>
@{
  Layout = "_Layout.cshtml";
}
@section Top
{
    <h1>Simple Deck Viewer <span class="label label-warning">In-Development</span></h1>
}
<div>
<div style="float:left;">
    @{string path = "/decks/viewer";}
    @if(@Model.Deck != null && @Model.Deck.Id != null && @Model.Deck.Id != Guid.Empty)
    {
        path = string.Format("/decks/viewer/{0}", @Model.Deck.Id);
    }
    <form action="@path" method="post" >
        <input type="text" name="Name" value="@Model.Name" placeholder="Deck name"/><br /><br />
        <textarea rows="20" cols="30" name="DeckFile" placeholder="Paste .dec file here">@Model.DeckFile</textarea>
        <br />
        <button type="submit" class="btn btn-primary btn-lg" name="Render">Render</button>
        @if(@Model.Planeswalker != null)
        {
            <button type="submit" class="btn btn-primary btn-lg" name="Save">Save</button>
        }
    </form>
</div>
<div style="float:left;margin-left: 20px;width:800px;" id="deck">
@foreach(string type in new string[]{"creature", "instant", "sorcery", "enchantment", "artifact", "land", "other"})
{
    if(@Model.Deck != null && Model.Deck.GetCards(type).Length > 0)
    {
        <div id="@type">
        <h4>@type</h4>
        @foreach(var card in Model.Deck.GetCards(type))
        {
            int repeat = (int)System.Math.Ceiling(@Model.Deck.CardCount(card.Id) / 4.0);
            for(int times = 0; times < repeat; times++)
            {
                int top = 0;
                string topStyle = string.Format("{0}px;", top);
                int max = @Model.Deck.CardCount(card.Id) - (times * 4);
                <div style="float:left;margin-left:10px;">
                    <div style="position:relative;max-height:140px;" class="deck-card" data-container="body" data-toggle="popover" data-placement="right" 
                            data-content="<image src='@card.CardImage' />" data-title="@card.Name">
                        
                        <image src="@card.CardImage" style="position:relative;width:65px;height:87px; z-index: 0;display:block;" />
                        @for(int i = 1; (i < max && i < 4); i++ )
                        {
                            top = i * -70;
                            topStyle = string.Format("{0}px;", top);
                            <image src="@card.CardImage"
                            style="position:relative;width:65px;height:87px; z-index: @i; display: block;top:@topStyle" />
                        }
                    </div>
                </div>
            }
        }
        <br style="clear:both;" />
        </div>
    }
}
<div id="sidebar">
    @if(@Model.Deck != null && @Model.Deck.SideBar.Count > 0)
    {
        <h1>Side Bar</h1>
        foreach(var card in Model.Deck.GetSideBarCards())
        {
            int repeat = (int)System.Math.Ceiling(@Model.Deck.SideBarCardCount(card.Id) / 4.0);
            for(int times = 0; times < repeat; times++)
            {
                int top = 0;
                string topStyle = string.Format("{0}px;", top);
                int max = @Model.Deck.SideBarCardCount(card.Id) - (times * 4);
                <div style="float:left;margin-left:10px;">
                    <div style="position:relative;height:140px;">
                        <image src="@card.CardImage" style="position:relative;width:65px;height:87px; z-index: 0;display:block;"/>
                        @for(int i = 1; (i < max && i < 4); i++ )
                        {
                            top = i * -70;
                            topStyle = string.Format("{0}px;", top);
                            <image src="@card.CardImage" 
                            style="position:relative;width:65px;height:87px; z-index: @i; display: block;top:@topStyle" />
                        }
                    </div>
                </div>
            }
        }
    }
    <br style="clear:both;" />
</div>
</div>
</div>
<br style="clear:both;" />

